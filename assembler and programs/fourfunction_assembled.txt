//initialize stuff:
0. 101 0111 0000 0111 //load position 7 (all spots)
1. 101 0110 0011 1111 //load index 63 (blank character)
2. 111 1000 1100 1010 //send blank character to A0
3. 111 1000 1110 1011 //clear A0

4. 101 0101 1111 0000 //load mask for ULRD

5. 010 0000 0000 0000 //clear reg 0 
6. 010 0001 0010 0100 //clear reg 1
7. 010 0010 0100 1000 //clear reg 2

//display 1 on A0 to show that you are entering the first operand:
8. 101 0111 0000 0110 //new position for A0 (rightmost spot)
9. 101 0110 0000 0001 //load character 1
10. 111 1000 1110 1011 //send rightmost spot to A0
11. 111 1000 1100 1010 //print the number 1

//load first operand:
12. 101 1000 0000 0000 //load numeric input into reg 0
13. 111 1000 0000 1100 //display numeric input

//check for any ULRD input:
14. 101 1011 0000 0001 //load button input
15. 001 1100 0111 0100 //mask input and store in reg 4 for later use
16. 110 1001 1000 0000 //reload input if no button pressed

//display 2 on A0 to show that you are entering the second operand:
17. 101 0110 0000 0010 //load character 2
18. 111 1000 1100 1010 //print the number 2

//load second operand:
19. 101 1001 0000 0000 //load numeric input into reg 1
20. 111 1000 0010 1100 //display numeric input

//check for A input:
21. 101 0101 0000 0001 //load mask for A
22. 101 1011 0000 0001 //load button input
23. 001 1011 0111 0100 //mask input but keep in reg 3
24. 110 1010 0110 0000 //reload input if A button not pressed

//clear and display 0:
25. 111 1000 0100 1100 //display 0 while busy
26. 101 0110 0011 1111 //load blank character
27. 111 1000 1100 1010 //send blank character to A0

//check for division:
28. 101 0101 0001 0000 //load mask for D
29. 001 1011 1001 0100 //mask old input for D
30. 110 1100 0000 0000 //if no input check for next operation (multiplication)
31. 110 0110 0110 0000 //otherwise start dividing

//check for multiplication:
32. 101 0101 0010 0000 //load mask for R
33. 001 1011 1001 0100 //mask old input for R
34. 110 1100 1000 0000 //if no input check for next operation (subtraction)
35. 110 0101 0110 0000 //otherwise start multiplying

//check for subtraction:
36. 101 0101 0100 0000 //load mask for L
37. 001 1011 1001 0100 //mask old input for L
38. 110 1101 0010 0000 //if no input then add; otherwise, subtract

//subtract numbers:
39. 011 1010 0000 0100 //subtract
40. 110 0111 1000 0000 

//add numbers:
41. 011 0010 0000 0100 //add
42. 110 0111 1000 0000 

//multiply numbers:
43. 101 0101 0000 0001 //load LSB mask into reg 5
44. 001 1100 0011 0100 //bit mask reg 1 with 1
45. 110 1101 1110 0000 //skip adding partial product if selected bit is off
46. 011 0010 0100 0000 //add partial product to accumulator
47. 010 1001 0010 0000 //shift reg 1 right
48. 110 1111 1000 0000 //if reg 1 is 0 then show result
49. 011 0000 0000 0000 //go to the next partial product
50. 110 0101 1000 0000 //keep adding

//divide numbers:
51. 001 0001 0010 0100 //check for divisor being 0
52. 110 1111 1000 0000 //just show 0 if div/0

53. 000 0011 0000 0000 //move dividend to reg 3 to initialize the remainder
54. 011 1011 0110 0100 //subtract divisor from remainder
55. 111 0111 0100 0000 //if remainder < divisor then show result
56. 100 0010 0100 0000 //increment quotient
57. 110 0110 1100 0000 //keep subtracting

58. 011 0011 0110 0100 //restore last subtraction to get correct remainder
59. 111 1000 0110 1010 //show remainder on A0

//show operation result:
60. 111 1000 0100 1100 //show result on numeric display

61. 110 0111 1010 0000 //stop the program
